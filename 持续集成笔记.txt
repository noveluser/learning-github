       周末花了一个上午大致看了下获得jolt大奖的持续集成一书，作个笔记。
	1.什么是持续集成？简单讲就是不间断集成，任何一个软件项目，在项目早期，就搭建出可实施的大体框架。包括自动构造-----自动测试----自动审查----自动反馈----自动集成数据库-----自动部署。
	2.优秀的持续集成。  尽早搭建出可部署的框架，早集成，经常性集成。为每个小变动都构建出可实施的实体。
	3.自动构建，优秀的工具，java下有ant,maven等，还有shell.
	4.CI的结构       多个开发者-----版本控制库-----集成构建服务器-----反馈------开发者，若顺利集成-----构造脚本，集成实体（编译源代码--集成数据库---执行测试---执行审核---部署软件）
	5.优秀的持续集成应当遵守的准则。
	   a.经常性的提交代码
	   b.不用提交无法构建的代码，也就是说在提交到版本控制系统之前，在本地先完成私有构建。
	   c.立即修复无法集成的构建-----有问题第一时间修复，避免影响后期的开发
	   d.编写自动化的开发者测试
	   f.必须通过所有测试和审核
	   g.避免签出无法构建的代码---也就是说问题未修复前不要进行下一步的更新，否则问题会滚雪球而来。
	 6.首先小规模的，微粒化的添加持续集成模块，让公司看到变化，同时也降低风险。
	 7. 软件项目的风险所在。
	    a.没有可部署的软件----解决办法，专门用一台服务器去执行自动构成。
		b. 很晚才发现风险-----经常性的提交代码可以解决
		c.缺少项目可见性----自动反馈
		d.低品质的软件------暂时不考虑，这里的解决办法是坚持编码标准和坚持自动化审核
	8. 快速构建----
	注:提交上github又出现问题，查看什么原因